version: "3.9"

services:
  zookeeper:
    image: zookeeper:3.7.0
    restart: on-failure
    ports:
      - 2181:2181
    environment:
      ZOO_MY_ID: 1
      ZOO_SERVERS: server.1=zookeeper:2888:3888;2181
    volumes:
      - zoo-data:/data
      - zoo-datalog:/datalog
      - zoo-logs:/logs
  kafka:
    build:
      context: .
      dockerfile: docker/Dockerfile.kafka
    restart: on-failure
    ports:
      - 9092:9092
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka:19092,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092
      KAFKA_LISTENERS: LISTENER_DOCKER_INTERNAL://:19092,LISTENER_DOCKER_EXTERNAL://:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
      WAIT_HOSTS: zookeeper:2181
    volumes:
      - kafka-data:/kafka
    depends_on:
      - zookeeper
  kafka-ui:
    build:
      context: .
      dockerfile: docker/Dockerfile.kafka-ui
    restart: on-failure
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:19092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      WAIT_HOSTS: kafka:19092,zookeeper:2181
    ports:
      - 9000:8080
    depends_on:
      - kafka
      - zookeeper
volumes:
  kafka-data:
  zoo-data:
  zoo-datalog:
  zoo-logs:
